{"ast":null,"code":"/*import React, { useState, useEffect } from 'react';\r\n\r\nconst PatientDashboard = () => {\r\n  const [appointments, setAppointments] = useState([]);\r\n  //const [patientId, setPatientId] = useState(0);\r\n  const [slotId, setSlotId] = useState(0);\r\n  const [message, setMessage] = useState('');\r\n  const userId = localStorage.getItem('userId');\r\n\r\n  const fetchAppointments = async () => {\r\n    try {\r\n      const response = await fetch(`/api/patients/${userId}reservations`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed To Fetch Patient Appointments');\r\n      }\r\n      const data = await response.json();\r\n      setAppointments(data.reservations);\r\n    } catch (error) {\r\n      setMessage(error.message);\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAppointments();\r\n  }, []);\r\n\r\n  const bookAppointment = async () => {\r\n    try {\r\n      const response = await fetch('/api/patients/bookappointment', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          patient_id: userId,\r\n          slot_id: slotId\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message);\r\n      }\r\n      setAppointments(data.reservations);\r\n      fetchAppointments();\r\n      setMessage('Appointment Booked Successfully');\r\n    } catch (error) {\r\n      setMessage(error.message);\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"patient-dashboard-container\">\r\n      <h2>Welcome Patient</h2>\r\n      <h3>My Appointments</h3>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Appointment ID</th>\r\n            <th>Doctor Name</th>\r\n            <th>Date</th>\r\n            <th>Start Time</th>\r\n            <th>End Time</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {appointments.map(appointment => (\r\n          <tr key={appointment.appointment_id}>\r\n            <td>{appointment.appointment_id}</td>\r\n            <td>{appointment.doctor_name}</td>\r\n            <td>{appointment.date}</td>\r\n            <td>{appointment.start_time}</td>\r\n            <td>{appointment.end_time}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n  <div className=\"book-appointment-container\">\r\n  <label>Slot ID:</label>\r\n    <input type=\"number\" value={slotId} onChange={(e) => setSlotId(e.target.value)} />\r\n    <button onClick={bookAppointment}>Book Appointment</button>\r\n  </div>\r\n  {message && <p className=\"error-message\">{message}</p>}\r\n</div>\r\n  );\r\n};\r\n\r\nexport default PatientDashboard;*/import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const ReservationPage=()=>{const[reservations,setReservations]=useState([]);const[slotId,setSlotId]=useState(0);const[bookingMessage,setBookingMessage]=useState('');useEffect(()=>{const fetchReservations=async()=>{const patientId=localStorage.getItem('userId');// Assuming patientId is obtained from local storage\nconst response=await fetch(\"/api/patients/\".concat(patientId,\"/reservations\"));const data=await response.json();setReservations(data.reservations);};fetchReservations();},[]);const handleBooking=async e=>{e.preventDefault();const patientId=localStorage.getItem('userId');// Assuming patientId is obtained from local storage\nconst response=await fetch('/api/bookAppointment',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({patient_id:patientId,slot_id:slotId})});const data=await response.json();if(response.ok){setBookingMessage('Appointment booked successfully!');const updatedReservationsResponse=await fetch(\"/api/patients/\".concat(patientId,\"/reservations\"));const updatedReservationsData=await updatedReservationsResponse.json();setReservations(updatedReservationsData.reservations);}else{setBookingMessage(data.message);}};// Function to format the date in a more readable format\nconst formatDate=dateString=>{const date=new Date(dateString);const options={year:'numeric',month:'long',day:'numeric'};return date.toLocaleDateString('en-US',options);};// Function to format the time in AM/PM format\nconst formatTime=timeString=>{const time=new Date(\"2000-01-01T\".concat(timeString));return time.toLocaleTimeString('en-US',{hour:'numeric',minute:'2-digit'});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Your Reservations\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"ID\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Appointment\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Doctor\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:reservations.map(reservation=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:reservation.slot_id}),/*#__PURE__*/_jsx(\"td\",{children:\"\".concat(reservation.doctor_name,\" - \").concat(formatDateTime(reservation.date,reservation.start_time),\" to \").concat(formatDateTime(reservation.date,reservation.end_time))})]},reservation.appointment_id))})]}),/*#__PURE__*/_jsx(\"h2\",{children:\"Book an Appointment\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleBooking,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Slot ID:\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:slotId,onChange:e=>setSlotId(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Book Appointment\"})]}),bookingMessage&&/*#__PURE__*/_jsx(\"p\",{children:bookingMessage})]});};export default ReservationPage;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","ReservationPage","reservations","setReservations","slotId","setSlotId","bookingMessage","setBookingMessage","fetchReservations","patientId","localStorage","getItem","response","fetch","concat","data","json","handleBooking","e","preventDefault","method","headers","body","JSON","stringify","patient_id","slot_id","ok","updatedReservationsResponse","updatedReservationsData","message","formatDate","dateString","date","Date","options","year","month","day","toLocaleDateString","formatTime","timeString","time","toLocaleTimeString","hour","minute","children","map","reservation","doctor_name","formatDateTime","start_time","end_time","appointment_id","onSubmit","type","value","onChange","target"],"sources":["C:/Users/MAS/Documents/VScode/clinicWebApp/client/src/components/PatientDashboard.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\r\n\r\nconst PatientDashboard = () => {\r\n  const [appointments, setAppointments] = useState([]);\r\n  //const [patientId, setPatientId] = useState(0);\r\n  const [slotId, setSlotId] = useState(0);\r\n  const [message, setMessage] = useState('');\r\n  const userId = localStorage.getItem('userId');\r\n\r\n  const fetchAppointments = async () => {\r\n    try {\r\n      const response = await fetch(`/api/patients/${userId}reservations`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed To Fetch Patient Appointments');\r\n      }\r\n      const data = await response.json();\r\n      setAppointments(data.reservations);\r\n    } catch (error) {\r\n      setMessage(error.message);\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAppointments();\r\n  }, []);\r\n\r\n  const bookAppointment = async () => {\r\n    try {\r\n      const response = await fetch('/api/patients/bookappointment', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          patient_id: userId,\r\n          slot_id: slotId\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message);\r\n      }\r\n      setAppointments(data.reservations);\r\n      fetchAppointments();\r\n      setMessage('Appointment Booked Successfully');\r\n    } catch (error) {\r\n      setMessage(error.message);\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"patient-dashboard-container\">\r\n      <h2>Welcome Patient</h2>\r\n      <h3>My Appointments</h3>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Appointment ID</th>\r\n            <th>Doctor Name</th>\r\n            <th>Date</th>\r\n            <th>Start Time</th>\r\n            <th>End Time</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {appointments.map(appointment => (\r\n          <tr key={appointment.appointment_id}>\r\n            <td>{appointment.appointment_id}</td>\r\n            <td>{appointment.doctor_name}</td>\r\n            <td>{appointment.date}</td>\r\n            <td>{appointment.start_time}</td>\r\n            <td>{appointment.end_time}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n  <div className=\"book-appointment-container\">\r\n  <label>Slot ID:</label>\r\n    <input type=\"number\" value={slotId} onChange={(e) => setSlotId(e.target.value)} />\r\n    <button onClick={bookAppointment}>Book Appointment</button>\r\n  </div>\r\n  {message && <p className=\"error-message\">{message}</p>}\r\n</div>\r\n  );\r\n};\r\n\r\nexport default PatientDashboard;*/\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst ReservationPage = () => {\r\n  const [reservations, setReservations] = useState([]);\r\n  const [slotId, setSlotId] = useState(0);\r\n  const [bookingMessage, setBookingMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchReservations = async () => {\r\n      const patientId = localStorage.getItem('userId'); // Assuming patientId is obtained from local storage\r\n      const response = await fetch(`/api/patients/${patientId}/reservations`);\r\n      const data = await response.json();\r\n      setReservations(data.reservations);\r\n    };\r\n    fetchReservations();\r\n  }, []);\r\n\r\n  const handleBooking = async (e) => {\r\n    e.preventDefault();\r\n    const patientId = localStorage.getItem('userId'); // Assuming patientId is obtained from local storage\r\n    const response = await fetch('/api/bookAppointment', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ patient_id: patientId, slot_id: slotId }),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      setBookingMessage('Appointment booked successfully!');\r\n      const updatedReservationsResponse = await fetch(`/api/patients/${patientId}/reservations`);\r\n      const updatedReservationsData = await updatedReservationsResponse.json();\r\n      setReservations(updatedReservationsData.reservations);\r\n    } else {\r\n      setBookingMessage(data.message);\r\n    }\r\n  };\r\n\r\n  // Function to format the date in a more readable format\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    return date.toLocaleDateString('en-US', options);\r\n  };\r\n  \r\n  // Function to format the time in AM/PM format\r\n  const formatTime = (timeString) => {\r\n    const time = new Date(`2000-01-01T${timeString}`);\r\n    return time.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your Reservations</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Appointment</th>\r\n            <th>Doctor</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {reservations.map((reservation) => (\r\n            <tr key={reservation.appointment_id}>\r\n              <td>{reservation.slot_id}</td>\r\n              <td>{`${reservation.doctor_name} - ${formatDateTime(reservation.date, reservation.start_time)} to ${formatDateTime(reservation.date, reservation.end_time)}`}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <h2>Book an Appointment</h2>\r\n      <form onSubmit={handleBooking}>\r\n        <label>\r\n          Slot ID:\r\n          <input type=\"number\" value={slotId} onChange={(e) => setSlotId(e.target.value)} />\r\n        </label>\r\n        <button type=\"submit\">Book Appointment</button>\r\n      </form>\r\n      {bookingMessage && <p>{bookingMessage}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReservationPage;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}